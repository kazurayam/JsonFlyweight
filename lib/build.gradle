// JsonFlyweightPrettyPrinter/lib/build.gradle

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group 'com.kazurayam'
version '0.1.0-SNAPSHOT'

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.13'

    testImplementation libs.testng
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation 'ch.qos.logback:logback-classic:1.5.6'
    testImplementation 'com.kazurayam:unittest-helper:0.5.1'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

tasks.named('test') {
    // Use TestNG for unit tests.
    useTestNG()
}

javadoc {
    options.showFromProtected()
    failOnError = false
    options.locale = "en_US"
}
task copyJavadocToDocsDir(type: Copy) {
    from "build/docs/javadoc"
    into "../docs/api"
}
javadoc.finalizedBy copyJavadocToDocsDir

jar {
    archiveBaseName = 'jsonflyweight'
}

publishing {
    publications {
        jsonflyweight(MavenPublication) {
            from components.java
            artifactId = 'jsonflyweight'
            pom {
                groupId = project.group
                name = project.rootProject.name
                description = "A utility class which pretty prints a JSON very fast with minimum memory requirement"
                url = "https://kazurayam.github.io/JsonFlyweightPrettyPrinter/"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org.licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "kazurayam"
                        name = "URAYAMA,kazuaki"
                        email = "kazuaki.urayama@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/kazurayam/${project.rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:kazurayam/${project.rootProject.name}.git"
                    url = "https://github.com/kazurayam/${project.rootProject.name}"
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo: snapshotRepo
            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : "Unknown user"
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : "Unknown password"
            }
        }
    }
}

signing {
    sign publishing.publications.jsonflyweight
}

// I do not want to sign the SNAPSHOT
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}